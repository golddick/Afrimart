{"ast":null,"code":"'use strict';\n\nlet {\n  isClean,\n  my\n} = require('./symbols');\n\nlet Declaration = require('./declaration');\n\nlet Comment = require('./comment');\n\nlet Node = require('./node');\n\nlet parse, Rule, AtRule, Root;\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes);\n    delete i.source;\n    return i;\n  });\n}\n\nfunction markDirtyUp(node) {\n  node[isClean] = false;\n\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markDirtyUp(i);\n    }\n  }\n}\n\nclass Container extends Node {\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last);\n\n      for (let node of nodes) this.proxyOf.nodes.push(node);\n    }\n\n    this.markDirty();\n    return this;\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween);\n\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween);\n    }\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined;\n    let iterator = this.getIterator();\n    let index, result;\n\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator];\n      result = callback(this.proxyOf.nodes[index], index);\n      if (result === false) break;\n      this.indexes[iterator] += 1;\n    }\n\n    delete this.indexes[iterator];\n    return result;\n  }\n\n  every(condition) {\n    return this.nodes.every(condition);\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0;\n    if (!this.indexes) this.indexes = {};\n    this.lastEach += 1;\n    let iterator = this.lastEach;\n    this.indexes[iterator] = 0;\n    return iterator;\n  }\n\n  getProxyProcessor() {\n    return {\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node;\n        } else if (!node[prop]) {\n          return node[prop];\n        } else if (prop === 'each' || typeof prop === 'string' && prop.startsWith('walk')) {\n          return (...args) => {\n            return node[prop](...args.map(i => {\n              if (typeof i === 'function') {\n                return (child, index) => i(child.toProxy(), index);\n              } else {\n                return i;\n              }\n            }));\n          };\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) => cb(child.toProxy(), ...other));\n          };\n        } else if (prop === 'root') {\n          return () => node.root().toProxy();\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy());\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy();\n        } else {\n          return node[prop];\n        }\n      },\n\n      set(node, prop, value) {\n        if (node[prop] === value) return true;\n        node[prop] = value;\n\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty();\n        }\n\n        return true;\n      }\n\n    };\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child;\n    if (child.proxyOf) child = child.proxyOf;\n    return this.proxyOf.nodes.indexOf(child);\n  }\n\n  insertAfter(exist, add) {\n    let existIndex = this.index(exist);\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse();\n    existIndex = this.index(exist);\n\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node);\n\n    let index;\n\n    for (let id in this.indexes) {\n      index = this.indexes[id];\n\n      if (existIndex < index) {\n        this.indexes[id] = index + nodes.length;\n      }\n    }\n\n    this.markDirty();\n    return this;\n  }\n\n  insertBefore(exist, add) {\n    let existIndex = this.index(exist);\n    let type = existIndex === 0 ? 'prepend' : false;\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse();\n    existIndex = this.index(exist);\n\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node);\n\n    let index;\n\n    for (let id in this.indexes) {\n      index = this.indexes[id];\n\n      if (existIndex <= index) {\n        this.indexes[id] = index + nodes.length;\n      }\n    }\n\n    this.markDirty();\n    return this;\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes);\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0);\n\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore');\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0);\n\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore');\n      }\n    } else if (nodes.type) {\n      nodes = [nodes];\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation');\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value);\n      }\n\n      nodes = [new Declaration(nodes)];\n    } else if (nodes.selector) {\n      nodes = [new Rule(nodes)];\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)];\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)];\n    } else {\n      throw new Error('Unknown node type in node creation');\n    }\n\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i);\n      i = i.proxyOf;\n      if (i.parent) i.parent.removeChild(i);\n      if (i[isClean]) markDirtyUp(i);\n\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '');\n        }\n      }\n\n      i.parent = this.proxyOf;\n      return i;\n    });\n    return processed;\n  }\n\n  prepend(...children) {\n    children = children.reverse();\n\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse();\n\n      for (let node of nodes) this.proxyOf.nodes.unshift(node);\n\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length;\n      }\n    }\n\n    this.markDirty();\n    return this;\n  }\n\n  push(child) {\n    child.parent = this;\n    this.proxyOf.nodes.push(child);\n    return this;\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined;\n\n    this.proxyOf.nodes = [];\n    this.markDirty();\n    return this;\n  }\n\n  removeChild(child) {\n    child = this.index(child);\n    this.proxyOf.nodes[child].parent = undefined;\n    this.proxyOf.nodes.splice(child, 1);\n    let index;\n\n    for (let id in this.indexes) {\n      index = this.indexes[id];\n\n      if (index >= child) {\n        this.indexes[id] = index - 1;\n      }\n    }\n\n    this.markDirty();\n    return this;\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts;\n      opts = {};\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return;\n      if (opts.fast && !decl.value.includes(opts.fast)) return;\n      decl.value = decl.value.replace(pattern, callback);\n    });\n    this.markDirty();\n    return this;\n  }\n\n  some(condition) {\n    return this.nodes.some(condition);\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result;\n\n      try {\n        result = callback(child, i);\n      } catch (e) {\n        throw child.addToError(e);\n      }\n\n      if (result !== false && child.walk) {\n        result = child.walk(callback);\n      }\n\n      return result;\n    });\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name;\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i);\n        }\n      });\n    }\n\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i);\n        }\n      });\n    }\n\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i);\n      }\n    });\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i);\n      }\n    });\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop;\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i);\n        }\n      });\n    }\n\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i);\n        }\n      });\n    }\n\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i);\n      }\n    });\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector;\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i);\n        }\n      });\n    }\n\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i);\n        }\n      });\n    }\n\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i);\n      }\n    });\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined;\n    return this.proxyOf.nodes[0];\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined;\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];\n  }\n\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant;\n};\n\nContainer.registerRule = dependant => {\n  Rule = dependant;\n};\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant;\n};\n\nContainer.registerRoot = dependant => {\n  Root = dependant;\n};\n\nmodule.exports = Container;\nContainer.default = Container;\n/* c8 ignore start */\n\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype);\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype);\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype);\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype);\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype);\n  }\n\n  node[my] = true;\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child);\n    });\n  }\n};\n/* c8 ignore stop */","map":{"version":3,"names":["isClean","my","require","Declaration","Comment","Node","parse","Rule","AtRule","Root","cleanSource","nodes","map","i","source","markDirtyUp","node","proxyOf","Container","append","children","child","normalize","last","push","markDirty","cleanRaws","keepBetween","each","callback","undefined","iterator","getIterator","index","result","indexes","length","every","condition","lastEach","getProxyProcessor","get","prop","startsWith","args","toProxy","cb","other","root","set","value","indexOf","insertAfter","exist","add","existIndex","reverse","splice","id","insertBefore","type","sample","Array","isArray","slice","parent","removeChild","Error","String","selector","name","text","processed","rebuild","raws","before","replace","prepend","first","unshift","removeAll","replaceValues","pattern","opts","walkDecls","decl","props","includes","fast","some","walk","e","addToError","walkAtRules","RegExp","test","walkComments","walkRules","registerParse","dependant","registerRule","registerAtRule","registerRoot","module","exports","default","Object","setPrototypeOf","prototype","forEach"],"sources":["/Users/macbook/Desktop/afrimartCom/node_modules/postcss/lib/container.js"],"sourcesContent":["'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet Declaration = require('./declaration')\nlet Comment = require('./comment')\nlet Node = require('./node')\n\nlet parse, Rule, AtRule, Root\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markDirtyUp(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markDirtyUp(i)\n    }\n  }\n}\n\nclass Container extends Node {\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n\n  getProxyProcessor() {\n    return {\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      },\n\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      }\n    }\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  insertAfter(exist, add) {\n    let existIndex = this.index(exist)\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertBefore(exist, add) {\n    let existIndex = this.index(exist)\n    let type = existIndex === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markDirtyUp(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nContainer.registerRoot = dependant => {\n  Root = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}