{"ast":null,"code":"'use strict';\n\nlet NoWorkResult = require('./no-work-result');\n\nlet LazyResult = require('./lazy-result');\n\nlet Document = require('./document');\n\nlet Root = require('./root');\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.30';\n    this.plugins = this.normalize(plugins);\n  }\n\n  normalize(plugins) {\n    let normalized = [];\n\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i();\n      } else if (i.postcss) {\n        i = i.postcss;\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins);\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i);\n      } else if (typeof i === 'function') {\n        normalized.push(i);\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error('PostCSS syntaxes cannot be used as plugins. Instead, please use ' + 'one of the syntax/parser/stringifier options as outlined ' + 'in your PostCSS runner documentation.');\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin');\n      }\n    }\n\n    return normalized;\n  }\n\n  process(css, opts = {}) {\n    if (this.plugins.length === 0 && typeof opts.parser === 'undefined' && typeof opts.stringifier === 'undefined' && typeof opts.syntax === 'undefined') {\n      return new NoWorkResult(this, css, opts);\n    } else {\n      return new LazyResult(this, css, opts);\n    }\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]));\n    return this;\n  }\n\n}\n\nmodule.exports = Processor;\nProcessor.default = Processor;\nRoot.registerProcessor(Processor);\nDocument.registerProcessor(Processor);","map":{"version":3,"names":["NoWorkResult","require","LazyResult","Document","Root","Processor","constructor","plugins","version","normalize","normalized","i","postcss","Array","isArray","concat","postcssPlugin","push","parse","stringify","process","env","NODE_ENV","Error","css","opts","length","parser","stringifier","syntax","use","plugin","module","exports","default","registerProcessor"],"sources":["/Users/macbook/Desktop/afrimartCom/node_modules/postcss/lib/processor.js"],"sourcesContent":["'use strict'\n\nlet NoWorkResult = require('./no-work-result')\nlet LazyResult = require('./lazy-result')\nlet Document = require('./document')\nlet Root = require('./root')\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.30'\n    this.plugins = this.normalize(plugins)\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n\n  process(css, opts = {}) {\n    if (\n      this.plugins.length === 0 &&\n      typeof opts.parser === 'undefined' &&\n      typeof opts.stringifier === 'undefined' &&\n      typeof opts.syntax === 'undefined'\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n      return new LazyResult(this, css, opts)\n    }\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,kBAAD,CAA1B;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAAxB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,QAAD,CAAlB;;AAEA,MAAMI,SAAN,CAAgB;EACdC,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;IACxB,KAAKC,OAAL,GAAe,QAAf;IACA,KAAKD,OAAL,GAAe,KAAKE,SAAL,CAAeF,OAAf,CAAf;EACD;;EAEDE,SAAS,CAACF,OAAD,EAAU;IACjB,IAAIG,UAAU,GAAG,EAAjB;;IACA,KAAK,IAAIC,CAAT,IAAcJ,OAAd,EAAuB;MACrB,IAAII,CAAC,CAACC,OAAF,KAAc,IAAlB,EAAwB;QACtBD,CAAC,GAAGA,CAAC,EAAL;MACD,CAFD,MAEO,IAAIA,CAAC,CAACC,OAAN,EAAe;QACpBD,CAAC,GAAGA,CAAC,CAACC,OAAN;MACD;;MAED,IAAI,OAAOD,CAAP,KAAa,QAAb,IAAyBE,KAAK,CAACC,OAAN,CAAcH,CAAC,CAACJ,OAAhB,CAA7B,EAAuD;QACrDG,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkBJ,CAAC,CAACJ,OAApB,CAAb;MACD,CAFD,MAEO,IAAI,OAAOI,CAAP,KAAa,QAAb,IAAyBA,CAAC,CAACK,aAA/B,EAA8C;QACnDN,UAAU,CAACO,IAAX,CAAgBN,CAAhB;MACD,CAFM,MAEA,IAAI,OAAOA,CAAP,KAAa,UAAjB,EAA6B;QAClCD,UAAU,CAACO,IAAX,CAAgBN,CAAhB;MACD,CAFM,MAEA,IAAI,OAAOA,CAAP,KAAa,QAAb,KAA0BA,CAAC,CAACO,KAAF,IAAWP,CAAC,CAACQ,SAAvC,CAAJ,EAAuD;QAC5D,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;UACzC,MAAM,IAAIC,KAAJ,CACJ,qEACE,2DADF,GAEE,uCAHE,CAAN;QAKD;MACF,CARM,MAQA;QACL,MAAM,IAAIA,KAAJ,CAAUZ,CAAC,GAAG,0BAAd,CAAN;MACD;IACF;;IACD,OAAOD,UAAP;EACD;;EAEDU,OAAO,CAACI,GAAD,EAAMC,IAAI,GAAG,EAAb,EAAiB;IACtB,IACE,KAAKlB,OAAL,CAAamB,MAAb,KAAwB,CAAxB,IACA,OAAOD,IAAI,CAACE,MAAZ,KAAuB,WADvB,IAEA,OAAOF,IAAI,CAACG,WAAZ,KAA4B,WAF5B,IAGA,OAAOH,IAAI,CAACI,MAAZ,KAAuB,WAJzB,EAKE;MACA,OAAO,IAAI7B,YAAJ,CAAiB,IAAjB,EAAuBwB,GAAvB,EAA4BC,IAA5B,CAAP;IACD,CAPD,MAOO;MACL,OAAO,IAAIvB,UAAJ,CAAe,IAAf,EAAqBsB,GAArB,EAA0BC,IAA1B,CAAP;IACD;EACF;;EAEDK,GAAG,CAACC,MAAD,EAAS;IACV,KAAKxB,OAAL,GAAe,KAAKA,OAAL,CAAaQ,MAAb,CAAoB,KAAKN,SAAL,CAAe,CAACsB,MAAD,CAAf,CAApB,CAAf;IACA,OAAO,IAAP;EACD;;AApDa;;AAuDhBC,MAAM,CAACC,OAAP,GAAiB5B,SAAjB;AACAA,SAAS,CAAC6B,OAAV,GAAoB7B,SAApB;AAEAD,IAAI,CAAC+B,iBAAL,CAAuB9B,SAAvB;AACAF,QAAQ,CAACgC,iBAAT,CAA2B9B,SAA3B"},"metadata":{},"sourceType":"script","externalDependencies":[]}