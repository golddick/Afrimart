{"ast":null,"code":"import { d as now, i as elementTransitionEnd } from '../shared/utils.mjs';\n\nfunction freeMode(_ref) {\n  let {\n    swiper,\n    extendParams,\n    emit,\n    once\n  } = _ref;\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n\n  function onTouchStart() {\n    if (swiper.params.cssMode) return;\n    const translate = swiper.getTranslate();\n    swiper.setTranslate(translate);\n    swiper.setTransition(0);\n    swiper.touchEventsData.velocities.length = 0;\n    swiper.freeMode.onTouchEnd({\n      currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n    });\n  }\n\n  function onTouchMove() {\n    if (swiper.params.cssMode) return;\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper; // Velocity\n\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: now()\n    });\n  }\n\n  function onTouchEnd(_ref2) {\n    let {\n      currentPos\n    } = _ref2;\n    if (swiper.params.cssMode) return;\n    const {\n      params,\n      wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper; // Time diff\n\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime;\n\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n\n      return;\n    }\n\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        } // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n\n\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1000 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n\n        newPosition = -newPosition;\n      }\n\n      if (needsLoopFix) {\n        once('transitionEnd', () => {\n          swiper.loopFix();\n        });\n      } // Fix duration\n\n\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n\n        if (params.freeMode.sticky) {\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        elementTransitionEnd(wrapperEl, () => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            elementTransitionEnd(wrapperEl, () => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n\n        if (!swiper.animating) {\n          swiper.animating = true;\n          elementTransitionEnd(wrapperEl, () => {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit('_freeModeNoMomentumRelease');\n    }\n\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd\n    }\n  });\n}\n\nexport { freeMode as default };","map":{"version":3,"names":["d","now","i","elementTransitionEnd","freeMode","_ref","swiper","extendParams","emit","once","enabled","momentum","momentumRatio","momentumBounce","momentumBounceRatio","momentumVelocityRatio","sticky","minimumVelocity","onTouchStart","params","cssMode","translate","getTranslate","setTranslate","setTransition","touchEventsData","velocities","length","onTouchEnd","currentPos","rtl","onTouchMove","data","touches","push","position","isHorizontal","time","touchStartTime","_ref2","wrapperEl","rtlTranslate","snapGrid","touchEndTime","timeDiff","minTranslate","slideTo","activeIndex","maxTranslate","slides","lastMoveEvent","pop","velocityEvent","distance","velocity","Math","abs","momentumDuration","momentumDistance","newPosition","doBounce","afterBouncePosition","bounceAmount","needsLoopFix","allowMomentumBounce","loop","centeredSlides","nextSlide","j","swipeDirection","loopFix","moveDistance","currentSlideSize","slidesSizesGrid","speed","slideToClosest","updateProgress","transitionStart","animating","destroyed","setTimeout","transitionEnd","updateActiveIndex","updateSlidesClasses","longSwipesMs","Object","assign","default"],"sources":["/Users/macbook/Desktop/afrimartCom/node_modules/swiper/modules/free-mode.mjs"],"sourcesContent":["import { d as now, i as elementTransitionEnd } from '../shared/utils.mjs';\n\nfunction freeMode(_ref) {\n  let {\n    swiper,\n    extendParams,\n    emit,\n    once\n  } = _ref;\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n  function onTouchStart() {\n    if (swiper.params.cssMode) return;\n    const translate = swiper.getTranslate();\n    swiper.setTranslate(translate);\n    swiper.setTransition(0);\n    swiper.touchEventsData.velocities.length = 0;\n    swiper.freeMode.onTouchEnd({\n      currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n    });\n  }\n  function onTouchMove() {\n    if (swiper.params.cssMode) return;\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper;\n    // Velocity\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: now()\n    });\n  }\n  function onTouchEnd(_ref2) {\n    let {\n      currentPos\n    } = _ref2;\n    if (swiper.params.cssMode) return;\n    const {\n      params,\n      wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper;\n    // Time diff\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime;\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n      return;\n    }\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        }\n        // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1000 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n        newPosition = -newPosition;\n      }\n      if (needsLoopFix) {\n        once('transitionEnd', () => {\n          swiper.loopFix();\n        });\n      }\n      // Fix duration\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n        if (params.freeMode.sticky) {\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        elementTransitionEnd(wrapperEl, () => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            elementTransitionEnd(wrapperEl, () => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        if (!swiper.animating) {\n          swiper.animating = true;\n          elementTransitionEnd(wrapperEl, () => {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit('_freeModeNoMomentumRelease');\n    }\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd\n    }\n  });\n}\n\nexport { freeMode as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}