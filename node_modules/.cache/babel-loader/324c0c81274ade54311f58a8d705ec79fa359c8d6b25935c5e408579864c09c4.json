{"ast":null,"code":"function Grid(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  let wasMultiRow;\n\n  const getSpaceBetween = () => {\n    let spaceBetween = swiper.params.spaceBetween;\n\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\n    } else if (typeof spaceBetween === 'string') {\n      spaceBetween = parseFloat(spaceBetween);\n    }\n\n    return spaceBetween;\n  };\n\n  const initSlides = slidesLength => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    numFullColumns = Math.floor(slidesLength / rows);\n\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n\n    slidesPerRow = slidesNumberEvenToRows / rows;\n  };\n\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows,\n      fill\n    } = swiper.params.grid; // Set slides order\n\n    let newSlideOrderIndex;\n    let column;\n    let row;\n\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n\n    slide.row = row;\n    slide.column = column;\n    slide.style[getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n  };\n\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.wrapperEl.style[getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n\n  const onInit = () => {\n    wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;\n  };\n\n  const onUpdate = () => {\n    const {\n      params,\n      el\n    } = swiper;\n    const isMultiRow = params.grid && params.grid.rows > 1;\n\n    if (wasMultiRow && !isMultiRow) {\n      el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\n      numFullColumns = 1;\n      swiper.emitContainerClasses();\n    } else if (!wasMultiRow && isMultiRow) {\n      el.classList.add(`${params.containerModifierClass}grid`);\n\n      if (params.grid.fill === 'column') {\n        el.classList.add(`${params.containerModifierClass}grid-column`);\n      }\n\n      swiper.emitContainerClasses();\n    }\n\n    wasMultiRow = isMultiRow;\n  };\n\n  on('init', onInit);\n  on('update', onUpdate);\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}\n\nexport { Grid as default };","map":{"version":3,"names":["Grid","_ref","swiper","extendParams","on","grid","rows","fill","slidesNumberEvenToRows","slidesPerRow","numFullColumns","wasMultiRow","getSpaceBetween","spaceBetween","params","indexOf","parseFloat","replace","size","initSlides","slidesLength","slidesPerView","Math","floor","ceil","max","updateSlide","i","slide","getDirectionLabel","slidesPerGroup","newSlideOrderIndex","column","row","groupIndex","slideIndexInGroup","columnsInGroup","min","style","order","updateWrapperSize","slideSize","snapGrid","centeredSlides","roundLengths","virtualSize","wrapperEl","newSlidesGrid","length","slidesGridItem","push","splice","onInit","onUpdate","el","isMultiRow","classList","remove","containerModifierClass","emitContainerClasses","add","default"],"sources":["/Users/macbook/Desktop/afrimartCom/node_modules/swiper/modules/grid.mjs"],"sourcesContent":["function Grid(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  let wasMultiRow;\n  const getSpaceBetween = () => {\n    let spaceBetween = swiper.params.spaceBetween;\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\n    } else if (typeof spaceBetween === 'string') {\n      spaceBetween = parseFloat(spaceBetween);\n    }\n    return spaceBetween;\n  };\n  const initSlides = slidesLength => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    numFullColumns = Math.floor(slidesLength / rows);\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n    slidesPerRow = slidesNumberEvenToRows / rows;\n  };\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    // Set slides order\n    let newSlideOrderIndex;\n    let column;\n    let row;\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n    slide.row = row;\n    slide.column = column;\n    slide.style[getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n  };\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.wrapperEl.style[getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n  const onInit = () => {\n    wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;\n  };\n  const onUpdate = () => {\n    const {\n      params,\n      el\n    } = swiper;\n    const isMultiRow = params.grid && params.grid.rows > 1;\n    if (wasMultiRow && !isMultiRow) {\n      el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\n      numFullColumns = 1;\n      swiper.emitContainerClasses();\n    } else if (!wasMultiRow && isMultiRow) {\n      el.classList.add(`${params.containerModifierClass}grid`);\n      if (params.grid.fill === 'column') {\n        el.classList.add(`${params.containerModifierClass}grid-column`);\n      }\n      swiper.emitContainerClasses();\n    }\n    wasMultiRow = isMultiRow;\n  };\n  on('init', onInit);\n  on('update', onUpdate);\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}\n\nexport { Grid as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}